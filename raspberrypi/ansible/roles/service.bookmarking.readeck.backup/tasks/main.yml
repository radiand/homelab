---
# We need full paths to executables to inject them into systemd services, which
# do not have access to user's PATH.
- name: Obtain readeck bin path
  ansible.builtin.shell: whereis -b readeck
  register: _readeck_bin_lookup

- name: Set readeck_bin fact
  set_fact:
    # use default(..., true) to treat empty string as unset
    readeck_bin: "{{ _readeck_bin_lookup.stdout.split(':', 1)[1].strip() | default('readeck', true) }}"

- name: Obtain restic bin bath
  ansible.builtin.shell: whereis -b restic
  register: _restic_bin_lookup

- name: Set restic_bin fact
  set_fact:
    # use default(..., true) to treat empty string as unset
    restic_bin: "{{ _restic_bin_lookup.stdout.split(':', 1)[1].strip()| default('restic', true) }}"

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ ansible_env.HOME }}/restic/readeck"
    - "{{ ansible_env.HOME }}/.config/restic/readeck"

- name: Check if restic repository exists
  ansible.builtin.command: restic --repo "{{ ansible_env.HOME }}/restic/readeck" cat config
  environment:
    RESTIC_PASSWORD: "{{ restic_password }}"
  ignore_errors: true
  register: restic_check

- name: Initialize restic repository
  when: restic_check.rc == 1
  ansible.builtin.command: restic init --repo "{{ ansible_env.HOME }}/restic/readeck"
  environment:
    RESTIC_PASSWORD: "{{ restic_password }}"

- name: Copy backup script
  ansible.builtin.template:
    src: readeck-backup.sh
    dest: "{{ ansible_env.HOME }}/.config/restic/readeck/readeck-backup.sh"
    mode: "0600"

- name: Copy systemd timer for periodic backups
  ansible.builtin.copy:
    src: readeck-backup.timer
    dest: "{{ ansible_env.HOME}}/.config/systemd/user/readeck-backup.timer"

- name: Copy systemd service for periodic backups
  ansible.builtin.template:
    src: readeck-backup.service
    dest: "{{ ansible_env.HOME}}/.config/systemd/user/readeck-backup.service"

- name: Enable systemd timer for periodic backups
  ansible.builtin.systemd_service:
    name: readeck-backup.timer
    scope: user
    enabled: true
    state: started
